# Query: AuthoritiesConstants.USER
# Flags: CaseSensitive
# ContextLines: 1

30 résultats - Fichiers 5

src/main/java/com/sing/singabsence/service/UserService.java:
  129          Set<Authority> authorities = new HashSet<>();
  130:         authorityRepository.findById(AuthoritiesConstants.EMPLOYEE).ifPresent(authorities::add);
  131          newUser.setAuthorities(authorities);

src/test/java/com/sing/singabsence/security/SecurityUtilsUnitTest.java:
  69          Collection<GrantedAuthority> authorities = new ArrayList<>();
  70:         authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.EMPLOYEE));
  71          securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("user", "user", authorities));

  73  
  74:         assertThat(SecurityUtils.hasCurrentUserThisAuthority(AuthoritiesConstants.EMPLOYEE)).isTrue();
  75          assertThat(SecurityUtils.hasCurrentUserThisAuthority(AuthoritiesConstants.ADMIN)).isFalse();

  81          Collection<GrantedAuthority> authorities = new ArrayList<>();
  82:         authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.EMPLOYEE));
  83          securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("user", "user", authorities));

  85  
  86:         assertThat(SecurityUtils.hasCurrentUserAnyOfAuthorities(AuthoritiesConstants.EMPLOYEE, AuthoritiesConstants.ADMIN)).isTrue();
  87          assertThat(SecurityUtils.hasCurrentUserAnyOfAuthorities(AuthoritiesConstants.ANONYMOUS, AuthoritiesConstants.ADMIN)).isFalse();

  93          Collection<GrantedAuthority> authorities = new ArrayList<>();
  94:         authorities.add(new SimpleGrantedAuthority(AuthoritiesConstants.EMPLOYEE));
  95          securityContext.setAuthentication(new UsernamePasswordAuthenticationToken("user", "user", authorities));

  97  
  98:         assertThat(SecurityUtils.hasCurrentUserNoneOfAuthorities(AuthoritiesConstants.EMPLOYEE, AuthoritiesConstants.ADMIN)).isFalse();
  99          assertThat(SecurityUtils.hasCurrentUserNoneOfAuthorities(AuthoritiesConstants.ANONYMOUS, AuthoritiesConstants.ADMIN)).isTrue();

src/test/java/com/sing/singabsence/web/rest/AccountResourceIT.java:
  116          validUser.setLangKey(Constants.DEFAULT_LANGUAGE);
  117:         validUser.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  118          assertThat(userRepository.findOneByLogin("test-register-valid")).isEmpty();

  138          invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);
  139:         invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  140  

  160          invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);
  161:         invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  162  

  182          invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);
  183:         invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  184  

  204          invalidUser.setLangKey(Constants.DEFAULT_LANGUAGE);
  205:         invalidUser.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  206  

  226          firstUser.setLangKey(Constants.DEFAULT_LANGUAGE);
  227:         firstUser.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  228  

  276          firstUser.setLangKey(Constants.DEFAULT_LANGUAGE);
  277:         firstUser.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  278  

  364              .hasSize(1)
  365:             .containsExactly(authorityRepository.findById(AuthoritiesConstants.EMPLOYEE).orElseThrow());
  366      }

src/test/java/com/sing/singabsence/web/rest/PublicUserResourceIT.java:
  82              .andExpect(jsonPath("$").isArray())
  83:             .andExpect(jsonPath("$").value(hasItems(AuthoritiesConstants.EMPLOYEE, AuthoritiesConstants.ADMIN)));
  84      }

src/test/java/com/sing/singabsence/web/rest/UserResourceIT.java:
  132          user.setLangKey(DEFAULT_LANGKEY);
  133:         user.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  134  

  165          user.setLangKey(DEFAULT_LANGKEY);
  166:         user.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  167  

  191          user.setLangKey(DEFAULT_LANGKEY);
  192:         user.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  193  

  217          user.setLangKey(DEFAULT_LANGKEY);
  218:         user.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  219  

  299          user.setLastModifiedDate(updatedUser.getLastModifiedDate());
  300:         user.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  301  

  340          user.setLastModifiedDate(updatedUser.getLastModifiedDate());
  341:         user.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  342  

  392          user.setLastModifiedDate(updatedUser.getLastModifiedDate());
  393:         user.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  394  

  432          user.setLastModifiedDate(updatedUser.getLastModifiedDate());
  433:         user.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  434  

  484          userDTO.setLastModifiedBy(DEFAULT_LOGIN);
  485:         userDTO.setAuthorities(Collections.singleton(AuthoritiesConstants.EMPLOYEE));
  486  

  499          assertThat(user.getLastModifiedDate()).isNotNull();
  500:         assertThat(user.getAuthorities()).extracting("name").containsExactly(AuthoritiesConstants.EMPLOYEE);
  501      }

  511          Authority authority = new Authority();
  512:         authority.setName(AuthoritiesConstants.EMPLOYEE);
  513          authorities.add(authority);

  529          assertThat(userDTO.getLastModifiedDate()).isEqualTo(user.getLastModifiedDate());
  530:         assertThat(userDTO.getAuthorities()).containsExactly(AuthoritiesConstants.EMPLOYEE);
  531          assertThat(userDTO.toString()).isNotNull();

  546  
  547:         authorityA.setName(AuthoritiesConstants.EMPLOYEE);
  548          assertThat(authorityA).isNotEqualTo(authorityB);
  549  
  550:         authorityB.setName(AuthoritiesConstants.EMPLOYEE);
  551          assertThat(authorityA).isEqualTo(authorityB).hasSameHashCodeAs(authorityB);
